{"version":3,"sources":["Loading.js","App.js","registerServiceWorker.js","index.js","app.module.css"],"names":["Loading","className","styles","React","Component","Profile","App","fullSize","key","path","componentPromise","default","CodeSplit","state","Comp","this","props","then","res","setState","catch","err","children","otherProps","NotFound","to","setTimeout","navigate","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","error","generateClassName","createGenerateClassName","jss","create","jssPreset","options","insertionPoint","document","getElementById","ReactDOM","render","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","module","exports"],"mappings":"sNAYeA,E,iLARX,OACE,yBAAKC,UAAWC,IAAO,wCAAvB,mB,GAHgBC,IAAMC,WCEtBC,EAAU,oDAEVC,E,iLAEF,OACE,yBAAKL,UAAWC,IAAOK,UACrB,kBAAC,IAAD,CAAQN,UAAWC,IAAOK,UACxB,kBAAC,EAAD,CACEC,IAAI,UACJC,KAAK,aACLC,iBAAkBL,IAEpB,kBAAC,EAAD,CAAUM,SAAO,U,GAVTR,IAAMC,WAiBlBQ,E,2MACJC,MAAQ,CACNC,KAAMd,G,mFAGa,IAAD,OACVU,EAAqBK,KAAKC,MAA1BN,iBACJA,GACFA,EACGO,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAEL,KAAMI,EAAIP,aACtCS,OAAM,SAAAC,GACL,EAAKF,SAAS,CACZL,KAAM,0DAAwCO,W,+BAM9C,IACAP,EAASC,KAAKF,MAAdC,KADD,EAE+CC,KAAKC,MAAjCM,GAFnB,EAECZ,iBAFD,EAEmBY,UAAaC,EAFhC,+CAGP,OAAO,kBAACT,EAASS,EAAaD,O,GArBVnB,IAAMC,WAyBxBoB,E,iLAEF,OAAO,kBAAC,IAAD,CAAMC,GAAG,aAAT,8B,0CAGPC,YAAW,WACTC,YAAS,eACR,S,GAPgBxB,IAAMC,WAWdE,ICjDTsB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTlB,MAAK,SAAAsB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5B,QACfuB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB1B,OAAM,SAAA2B,GACLF,QAAQE,MAAM,4CAA6CA,M,qCCtE3DC,EAAoBC,oCACpBC,EAAMC,iBAAOC,uBAEnBF,EAAIG,QAAQC,eAAiBC,SAASC,eAAe,uBAErDC,IAASC,OACP,kBAAC,IAAD,CAAaR,IAAKA,EAAKF,kBAAmBA,GACxC,kBAAC,EAAD,OAEFO,SAASC,eAAe,SDEX,WACb,GAA6C,kBAAmBpB,UAAW,CAGzE,GADkB,IAAIuB,IAAIC,WAAwB9B,OAAOC,UAC3C8B,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMyB,WAAN,sBAEPhC,IAiDV,SAAiCO,GAE/B4B,MAAM5B,GACHlB,MAAK,SAAA+C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7ChC,UAAUC,cAAcgC,MAAMpD,MAAK,SAAAsB,GACjCA,EAAa+B,aAAarD,MAAK,WAC7Ba,OAAOC,SAASwC,eAKpBrC,EAAgBC,MAGnBf,OAAM,WACLyB,QAAQC,IACN,oEArEA0B,CAAwBrC,GAIxBC,UAAUC,cAAcgC,MAAMpD,MAAK,WACjC4B,QAAQC,IACN,gHAMJZ,EAAgBC,OC5BxBsC,I,mBCnBAC,EAAOC,QAAU,CAAC,MAAQ,mBAAmB,UAAY,uBAAuB,WAAa,wBAAwB,SAAW,iEAAiE,MAAQ,qB","file":"static/js/main.39d947cf.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from \"./app.module.css\";\nclass Loading extends React.Component {\n  render() {\n    return (\n      <div className={styles[\"full-size-d-flex-column-centralized\"]}>\n        Loading ...\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from \"react\";\nimport { Router, Link, navigate } from \"@reach/router\";\nimport styles from \"./app.module.css\";\nimport Loading from \"./Loading\";\nconst Profile = import(\"./apps/profile/Profile\");\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className={styles.fullSize}>\n        <Router className={styles.fullSize}>\n          <CodeSplit\n            key=\"profile\"\n            path=\"/profile/*\"\n            componentPromise={Profile}\n          />\n          <NotFound default />\n        </Router>\n      </div>\n    );\n  }\n}\n\nclass CodeSplit extends React.Component {\n  state = {\n    Comp: Loading\n  };\n\n  componentDidMount() {\n    const { componentPromise } = this.props;\n    if (componentPromise) {\n      componentPromise\n        .then(res => this.setState({ Comp: res.default }))\n        .catch(err => {\n          this.setState({\n            Comp: () => `Failed to load the component ..${err}`\n          });\n        });\n    }\n  }\n\n  render() {\n    const { Comp } = this.state;\n    const { componentPromise, children, ...otherProps } = this.props;\n    return <Comp {...otherProps}>{children}</Comp>;\n  }\n}\n\nclass NotFound extends React.Component {\n  render() {\n    return <Link to=\"/profile/\">Navigating to Profile...</Link>;\n  }\n  componentDidMount() {\n    setTimeout(() => {\n      navigate(\"/profile/\");\n    }, 200);\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nimport JssProvider from \"react-jss/lib/JssProvider\";\nimport { create } from \"jss\";\nimport { createGenerateClassName, jssPreset } from \"@material-ui/core/styles\";\n\nconst generateClassName = createGenerateClassName();\nconst jss = create(jssPreset());\n// We define a custom insertion point that JSS will look for injecting the styles in the DOM.\njss.options.insertionPoint = document.getElementById(\"jss-insertion-point\");\n\nReactDOM.render(\n  <JssProvider jss={jss} generateClassName={generateClassName}>\n    <App />\n  </JssProvider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dFlex\":\"app_dFlex__3qgKa\",\"fullWidth\":\"app_fullWidth__35Xnt\",\"fullHeight\":\"app_fullHeight__2bZnJ\",\"fullSize\":\"app_fullSize__3uhLp app_fullHeight__2bZnJ app_fullWidth__35Xnt\",\"flex1\":\"app_flex1__3AsjJ\"};"],"sourceRoot":""}